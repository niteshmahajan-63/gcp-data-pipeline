truncate table `sync_ctas.patient_summary_info_ctasp`;

insert into `sync_ctas.patient_summary_info_ctasp` (patientid, labpatientid, labbillid, name, yearofbirth, age, gender, mobile, email, mobileid, emailid, nationalityid, hasvalidmobile, hasvalidemail, joiningdate, channelid, channel, lastcenterid, lastcentrename, servicetype, patienttypeid, patienttype, visittype, visit_count, lastvisitdate, labname, encounterid) 
SELECT a.remoteid AS patientid, COALESCE(aa.patientid, a.patientid) AS labpatientid, aa.bookingid AS labbillid, a.name, a.age AS yearofbirth, ( CAST ( extract ( year from DATE( CURRENT_DATETIME() ) ) AS integer ) - a.age ) AS age, a.gender as gender, b.mobile as mobile, f.email as email, a.mobileid, a.emailid, a.nationalityid, case when ( b.mobile is not null and mb.mobileid is not null ) then false when regexp_contains(b.mobile, '^(?:1|2|3|4)') then false when ( b.mobile is not null and mb.mobileid is null and regexp_contains(b.mobile, '^(?:5|6|7|8|9)') ) then true when ( b.mobile is null and mb.mobileid is null ) then false END AS hasvalidmobile, case when ( f.email is not null and eb.emailid is not null ) then false when ( f.email is not null and eb.emailid is null ) then true when ( f.email is null and eb.emailid is null ) then false end as hasvalidemail, date(a.joiningdate), aa.channelid, c.value as channel, COALESCE(aa.centreid,a.centreid) AS lastcenterid, d.centrename as lastcentrename, '-' AS servicetype, aa.patienttypeid, e.value as patienttype, case when aa.visitgap > 7 then 'repeat' else 'new' end as visittype, aa.visitcount as visit_count, date( COALESCE(aa.lastvisitdate, a.joiningdate) ) as lastvisitdate, 'testclient' as labname, a.encounterid FROM `sync_merged.patientmerged` as a left join `sync_merged.patientvisitsummary` as aa on a.remoteid = aa.remoteid left join `sync_pre_merge.mobileindex` as b on a.mobileid = b.id left join `sync_constant.channel` as c on aa.channelid = c.id left join `sync_constant.centres` as d on COALESCE (aa.centreid, a.centreid) = d.id left join `sync_constant.patienttype` as e on aa.patienttypeid = e.id left join `sync_pre_merge.emailindex` as f on a.emailid = f.id left join `sync_merged.mobileblacklist` as mb on b.id = mb.mobileid left join `sync_merged.emailblacklist` as eb on f.id = eb.emailid
