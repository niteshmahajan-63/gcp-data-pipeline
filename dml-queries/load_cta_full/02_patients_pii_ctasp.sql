truncate table `sync_ctas.patients_pii_ctasp`;

insert into `sync_ctas.patients_pii_ctasp` (patientid,name,remoteid,mobileid,emailid,alternatemobileid,entitydoctorid,entityreferalid,age,bookingid,bookingids,visitgap,visitcount,centreid,channelid,patienttypeid,nationalityid,insertedon,updatedon,dob,joiningdate,lastvisitdate,deceased,blocked,gender,mobile,email,hasvalidmobile,hasvalidemail,channel,lastcentrename,servicetype,patienttype,type,labname,encounterid)
SELECT COALESCE(aa.patientid, a.patientid), a.name, a.remoteid, a.mobileid, a.emailid, a.alternatemobileid, aa.entitydoctorid, aa.entityreferalid, a.age, aa.bookingid, aa.bookingids, aa.visitgap, aa.visitcount, COALESCE(aa.centreid, a.centreid), aa.channelid, aa.patienttypeid, a.nationalityid, a.insertedon, a.updatedon, a.dob, date(a.joiningdate), date( COALESCE(aa.lastvisitdate, a.joiningdate) ), a.deceased, cast(null as bool) as blocked, a.gender as gender, b.mobile as mobile, f.email as email, case when ( b.mobile is not null and mb.mobileid is not null ) then false when regexp_contains(b.mobile, '^(?:1|2|3|4)') then false when ( b.mobile is not null and mb.mobileid is null and regexp_contains(b.mobile, '^(?:5|6|7|8|9)') ) then true when ( b.mobile is null and mb.mobileid is null ) then false END AS hasvalidmobile, case when ( f.email is not null and eb.emailid is not null ) then false when ( f.email is not null and eb.emailid is null ) then true when ( f.email is null and eb.emailid is null ) then false end as hasvalidemail, c.value as channel, d.centrename as lastcentrename, '-' AS servicetype, e.value as patienttype, case when aa.visitgap > 7 then 'r' else 'n' end as type, 'testclient' as labname, COALESCE(aa.encounterid, a.encounterid) FROM `sync_merged.patientmerged` as a left join `sync_merged.patientvisitsummary` as aa on a.remoteid = aa.remoteid left join `sync_pre_merge.mobileindex` as b on a.mobileid = b.id left join `sync_constant.channel` as c on aa.channelid = c.id left join `sync_constant.centres` as d on COALESCE (aa.centreid, a.centreid) = d.id left join `sync_constant.patienttype` as e on aa.patienttypeid = e.id left join `sync_pre_merge.emailindex` as f on a.emailid = f.id left join `sync_merged.mobileblacklist` as mb on b.id = mb.mobileid left join `sync_merged.emailblacklist` as eb on f.id = eb.emailid;